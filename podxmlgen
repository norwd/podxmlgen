#!/bin/sh

podxmlgen_main() {
	set -e

	scriptpath="` realpath "$0" `"	
	scriptname="` basename "$scriptpath" `"
	scriptdir="` dirname "$scriptpath" `"

	e_args=16

	d_feed_explicit="no"
	d_feed_lang="en-ca"

	pubdateformat="%a, %d %b %Y %H:%M:%S %Z"

	feed_author=
	feed_cat=
	feed_desc=
	feed_email=
	feed_explicit=
	feed_img_url=
	feed_keywords=
	feed_lang=
	feed_rel=
	feed_subcat=
	feed_subtitle=
	feed_title=
	feed_xml_url=
	output=
	url_base=

	PATH="$scriptdir:$PATH"

	while getopts a:b:c:C:d:e:hi:k:l:o:r:s:t:u:x: opt
	do
		case $opt in
			a) feed_author="$OPTARG" ;;
			b) url_base="$OPTARG" ;;
			c) feed_cat="$OPTARG" ;;
			C) feed_subcat="$OPTARG" ;;
			d) feed_desc="$OPTARG" ;;
			e) feed_email="$OPTARG" ;;
			h) podxmlgen_usage && return ;;
			i) feed_img_url="$OPTARG" ;;
			k) feed_keywords="$OPTARG" ;;
			l) feed_lang="$OPTARG" ;;
			o) output="$OPTARG" ;;
			r) feed_rel="$OPTARG" ;;
			s) feed_subtitle="$OPTARG" ;;
			t) feed_title="$OPTARG" ;;
			u) feed_xml_url="$OPTARG" ;;
			x) feed_explicit="$OPTARG" ;;
			*) _invalid_opt ;;
		esac
	done

	[ $# -gt 0 ] && shift ` expr $OPTIND - 1 `

	inputdir="$1"
	[ -z "$inputdir" ] && inputdir="$PWD"

	[ $# -gt 0 ] && shift

	[ -z "$feed_author" ] && feed_author="$scriptname"
	[ -z "$feed_cat" ] && feed_cat="News"
	[ -z "$feed_desc" ] && feed_desc="Podcast generated by $scriptname."
	[ -z "$feed_explicit" ] && feed_explicit="$d_feed_explicit"
	[ -z "$feed_keywords" ] && feed_keywords="$scriptname"
	[ -z "$feed_lang" ] && feed_lang="$d_feed_lang"
	[ -z "$feed_subcat" ] && feed_subcat="Entertainment News"
	[ -z "$feed_title" ] && feed_title="A $scriptname Podcast"

	[ -z "$cmd" ] && cmd="feed"
	[ -z "$inputdir" ] && inputdir="."

	case "$cmd" in
		feed) "podxmlgen_$cmd" "$@" ;;
		help|usage) podxmlgen_usage ;;
		*) _invalid_cmd ;;
	esac

	return $?
}

podxmlgen_feed() {
	[ -z "$feed_explicit" ] && feed_explicit="no"
	[ -z "$feed_lang" ] && feed_lang="en-us"

	if [ -z "$output" ]
	then
		_xml
	else
		echo "$output"
		_xml > "$output"
	fi
}

podxmlgen_usage() {
cat <<USAGE
Usage: $scriptname [options] input_dir

Generate podcast XML feed file from directory with audio files.

Available arguments:

	input_dir   Directory containing episode audio files. Defaults to current directory.

Available options:

	-a          Name of podcast author. Defaults to "$scriptname".
	-b          URL base used by other URLs in XML file.
	-c          iTunes category.
	-C          iTunes sub-category.
	-d          Podcast description.
	-e          E-mail address of podcast author.
	-h          Show this help screen.
	-i          Image URL.
	-k          iTunes keywords, separated by commas. Defaults to "$scriptname".
	-l          Language and region (e.g. fr-ca). Defaults to "$d_feed_lang".
	-o          Output XML file path. Outputs to stdout if not set.
	-r          URL of site related to podcast.
	-s          Sub-title of podcast.
	-t          Title of podcast.
	-u          URL of podcast XML file.
	-x          Whether or not podcast is explicit ("yes" or "no"). Defaults to "$d_feed_explicit".

USAGE
}

_date() {
	local format="$1"
	[ $# -lt 2 ] && date +"$format" && return
	[ $# -gt 2 ] && export TZ="$3"
	date +"$format" --date="$2"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_invalid_cmd() {
	_error "Invalid command: $cmd"
	_echo
	podxmlgen_usage
	exit $e_args
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	podxmlgen_usage
	exit $e_args
}

_xml() {
	local year="` _date %Y `"
	local pubdate="` _date "$pubdateformat" `"

	cat <<XML
<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:itunesu="http://www.itunesu.com/feed" version="2.0">
	<channel>
		<link>$feed_rel</link>
		<language>$feed_lang</language>
		<copyright>&#xA9;$year</copyright>
		<webMaster>$feed_email</webMaster>
		<managingEditor>$feed_email</managingEditor>
		<image>
			<url>$feed_img_url</url>
			<title>$feed_title</title>
			<link>$feed_xml_url</link>
		</image>
		<itunes:owner>
			<itunes:name>$feed_author</itunes:name>
			<itunes:email>$feed_email</itunes:email>
		</itunes:owner>
		<itunes:category text="$feed_cat">
			<itunes:category text="$feed_subcat" />
		</itunes:category>
		<itunes:keywords>$feed_keywords</itunes:keywords>
		<itunes:explicit>$feed_explicit</itunes:explicit>
		<itunes:image href="$feed_img_url" />
		<atom:link href="$feed_xml_url" rel="self" type="application/rss+xml" />
		<pubDate>$pubdate</pubDate>
		<title>$feed_title</title>
		<itunes:author>$feed_author</itunes:author>
		<description>$feed_desc</description>
		<itunes:summary>$feed_desc</itunes:summary>
		<itunes:subtitle>$feed_subtitle</itunes:subtitle>
		<lastBuildDate>$pubdate</lastBuildDate>

		` _xml_items `
	</channel>
</rss>
XML
}

_xml_item() {
	local eppath="$1"
	local epfilename="` basename "$eppath" `"
	local isodate="`
		echo "$epfilename" \
			| grep -Eo "([0-9]{4})([0-9]{2})([0-9]{2})-([0-9]{2})([0-9]{2})([0-9]{2})" \
			| sed -E 's/^\D*//;s/([0-9]{4})([0-9]{2})([0-9]{2})-([0-9]{2})([0-9]{2})([0-9]{2})/\1-\2-\3 \4:\5:\6/'
	`"
	local item_title="` _date '%Y-%m-%d' "$isodate" `"
	local item_url="$url_base/$epfilename"
	local guid="` sha256sum "$epfilename" | cut -d' ' -f 1 `"
	local pubdate="` _date "$pubdateformat" "$isodate" "$TZ" `"

	cat <<XML
		<item>
			<title>$item_title</title>
			<enclosure url="$item_url" type="audio/mpeg" length="1" />
			<guid>$guid</guid>
			<itunes:duration>2:00:00</itunes:duration>
			<pubDate>$pubdate</pubDate>
		</item>
XML
}

_xml_items() {
	ls -r "$inputdir/"*.m4a | head -10 | while read eppath
	do
		_xml_item "$eppath"		 
	done
}

podxmlgen_main "$@"
